name: K8S Deploy and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHONPATH: ${{ github.workspace }}
  K8S_TEST_MODE: true

jobs:
  # 代码质量检查
  code_quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black
          
      - name: Prepare environment
        run: |
          mkdir -p logs testFile
          
      - name: Code quality checks
        run: |
          echo "Running code quality checks..."
          flake8 pkg/ --count --select=E9,F63,F7,F82 --show-source --statistics --max-line-length=120 || true
          black --check pkg/ || true

  # 部署任务，只在主分支推送时运行
  deploy:
    needs: code_quality  # 依赖代码质量检查成功
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'  # 只在主分支推送时运行
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整的git历史用于部署
      
      - name: Set up SSH
        run: |
          echo "配置SSH连接..."
          mkdir -p ~/.ssh
          
          # 设置SSH私钥（注意权限设置）
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # 确定使用主机名还是IP
          SERVER_TARGET="${{ secrets.SERVER_HOST }}"
          if [ -z "$SERVER_TARGET" ]; then
            SERVER_TARGET="${{ secrets.SERVER_IP }}"
          fi
          
          # 添加服务器到已知主机
          ssh-keyscan -H $SERVER_TARGET >> ~/.ssh/known_hosts 2>/dev/null
          chmod 644 ~/.ssh/known_hosts
          
          # 如果同时提供了IP和主机名，添加到hosts文件
          if [ ! -z "${{ secrets.SERVER_HOST }}" ] && [ ! -z "${{ secrets.SERVER_IP }}" ]; then
            echo "${{ secrets.SERVER_IP }} ${{ secrets.SERVER_HOST }}" | sudo tee -a /etc/hosts
          fi
          
          # 验证SSH设置
          ls -la ~/.ssh/
          echo "SSH密钥指纹:"
          ssh-keygen -l -f ~/.ssh/id_rsa || echo "无法生成密钥指纹"
      
      - name: Check SSH Connection
        id: ssh_check
        run: |
          echo "测试SSH连接..."
          
          # 确定使用主机名还是IP
          SERVER_TARGET="${{ secrets.SERVER_HOST }}"
          if [ -z "$SERVER_TARGET" ]; then
            SERVER_TARGET="${{ secrets.SERVER_IP }}"
          fi
          
          # 测试网络连通性
          echo "检查网络连通性..."
          ping -c 2 $SERVER_TARGET || echo "警告: 无法ping通服务器，但这可能是防火墙设置所致"
          
          # 尝试建立SSH连接 - 带详细输出
          for i in {1..3}; do
            echo "尝试SSH连接 ($i/3)..."
            if ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o ConnectTimeout=10 -o BatchMode=yes ${{ secrets.SERVER_USER }}@$SERVER_TARGET "echo 'SSH连接成功' && hostname && pwd"; then
              echo "SSH连接成功!"
              echo "::set-output name=ssh_success::true"
              break
            else
              echo "SSH连接失败，尝试详细调试..."
              ssh -vvv -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o ConnectTimeout=15 ${{ secrets.SERVER_USER }}@$SERVER_TARGET "echo 测试" || true
              
              if [ $i -eq 3 ]; then
                echo "无法建立SSH连接，部署将失败"
                echo "::set-output name=ssh_success::false"
                exit 1
              fi
              
              echo "等待10秒后重试..."
              sleep 10
            fi
          done
          
      - name: Deploy to server
        run: |
          echo "部署到服务器..."
          
          # 测试网络连通性
          echo "检查网络连通性..."
          
          # 确定使用主机名还是IP
          SERVER_TARGET="${{ secrets.SERVER_HOST }}"
          if [ -z "$SERVER_TARGET" ]; then
            SERVER_TARGET="${{ secrets.SERVER_IP }}"
          fi
          
          echo "使用目标: ${SERVER_TARGET}"
          ping -c 2 ${SERVER_TARGET} || echo "无法 ping 通服务器，但这不一定是问题"
          
          # 测试 SSH 连接 (包括详细调试信息)
          echo "测试 SSH 连接 (详细模式)..."
          ssh -vvv -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o ConnectTimeout=60 ${{ secrets.SERVER_USER }}@${SERVER_TARGET} "echo 'SSH 连接成功' && id && hostname && pwd"
          
          # 确保远程目录存在并有正确的权限
          echo "创建部署目录..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o ConnectTimeout=30 ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "mkdir -p /root/deploy && chmod 755 /root/deploy"
          
          # 将代码推送到服务器的指定目录
          echo "传输代码到远程服务器..."
          rsync -avz --timeout=60 -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" --exclude '.git' --exclude 'node_modules' --delete ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/root/deploy/ || {
            echo "错误: 无法使用rsync传输文件，尝试使用scp作为备选方案"
            scp -i ~/.ssh/id_rsa -o ConnectTimeout=30 -o StrictHostKeyChecking=no -r $(find . -type f -not -path "*/\.*" -not -path "*/node_modules/*" | grep -v "^./.git") ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/root/deploy/
          }
          
          # 显示远程目录内容，用于调试
          echo "验证文件传输..."
          ssh -o ConnectTimeout=20 ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "ls -la /root/deploy || echo '无法列出目录内容'"
          
          # 确保部署脚本有执行权限
          echo "设置部署脚本权限..."
          ssh -o ConnectTimeout=20 ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "chmod +x /root/deploy/deploy.sh || echo '无法设置部署脚本权限'"
          
          # 远程执行命令：使用部署脚本进行设置和启动
          echo "执行部署脚本..."
          {
            ssh -o ConnectTimeout=20 ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "cd /root/deploy && bash ./deploy.sh"
          } || {
            echo "部署脚本执行失败，尝试重新执行..."
            sleep 5
            ssh -o ConnectTimeout=30 ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "cd /root/deploy && bash ./deploy.sh"
          }
          
          # 验证服务是否正常启动
          echo "验证服务状态..."
          for i in {1..3}; do
            echo "尝试 $i/3 检查服务健康状态..."
            if ssh -o ConnectTimeout=20 ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "cd /root/deploy && curl -m 5 -f http://localhost:5050/health"; then
              echo "API Server 健康检查通过"
              break
            else
              echo "API Server 健康检查失败，等待重试..."
              sleep 10
            fi
            if [ $i -eq 3 ]; then
              echo "警告: API Server 可能未正确启动，但将继续执行"
            fi
          done
          
          # 验证服务是否正常启动 - 再次检查
          echo "等待服务完全启动..."
          sleep 10
          ssh -o ConnectTimeout=20 ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "ps -ef | grep python | grep -v grep || echo '没有找到Python进程'"
          
          # 显示日志以帮助诊断
          echo "获取服务日志摘要..."
          ssh -o ConnectTimeout=20 ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "ls -la /root/deploy/logs/ 2>/dev/null && tail -n 20 /root/deploy/logs/*.log 2>/dev/null || echo '无法获取日志'"
          
          echo "部署完成！"
          
  # 测试任务 - PR的测试流程
  test_pr:
    needs: [code_quality]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    services:
      # 启动 cAdvisor 容器用于监控
      cadvisor:
        image: google/cadvisor:latest
        ports:
          - 8080:8080
        volumes:
          - /:/rootfs:ro
          - /var/run:/var/run:ro
          - /sys:/sys:ro
          - /var/lib/docker/:/var/lib/docker:ro
          - /dev/disk/:/dev/disk:ro
        options: --privileged
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
          pip install docker requests pyyaml
          
      - name: Prepare test environment
        run: |
          mkdir -p logs testFile
      
      # 检查依赖服务（etcd和kafka）
      - name: Check dependencies
        run: |
          echo "检查依赖服务 (etcd和kafka)..."
          
          # 检查etcd (2379端口)
          nc -z localhost 2379 2>/dev/null
          ETCD_RUNNING=$?
          
          # 检查kafka (9092端口)
          nc -z localhost 9092 2>/dev/null
          KAFKA_RUNNING=$?
          
          if [ $ETCD_RUNNING -ne 0 ] || [ $KAFKA_RUNNING -ne 0 ]; then
            echo "etcd或kafka服务未运行，启动所需容器..."
            
            # 确定使用哪个docker-compose文件
            DOCKER_COMPOSE_FILE="./yamls/docker-compose.yml"
            
            # 停止可能存在的冲突容器
            docker-compose -f $DOCKER_COMPOSE_FILE down || true
            
            # 启动docker-compose
            echo "使用docker-compose启动依赖服务..."
            docker-compose -f $DOCKER_COMPOSE_FILE up -d
            
            # 等待服务启动
            echo "等待依赖服务启动 (30秒)..."
            sleep 30
            
            # 再次检查服务
            nc -z localhost 2379 2>/dev/null || { echo "etcd服务启动失败"; exit 1; }
            nc -z localhost 9092 2>/dev/null || { echo "kafka服务启动失败"; exit 1; }
            
            echo "依赖服务已成功启动"
          else
            echo "依赖服务已经在运行"
          fi
      
      # 启动所需服务
      - name: Start required services
        run: |
          echo "启动应用服务..."
          bash ./start.sh
          sleep 15  # 等待服务完全启动
      
      # 运行模块测试
      - name: Test individual modules
        run: |
          echo "Testing individual modules..."
          python -m pkg.apiObject.pod --test || true
          python -m pkg.apiObject.replicaSet --test || true
          python -m pkg.apiObject.hpa --test || true
      
      # 停止服务
      - name: Stop services
        run: |
          echo "Stopping services..."
          bash ./start.sh --stop
        if: always()  # 无论前面的步骤是否成功，都执行此步骤
      
      # 测试配置文件加载
      - name: Test configuration loading
        run: |
          echo "Testing configuration loading..."
          python -c "
          import sys, os
          sys.path.insert(0, os.getcwd())
          from pkg.config.globalConfig import GlobalConfig
          from pkg.config.uriConfig import URIConfig
          print('Config loading test passed')
          " || true
      
      # 测试 API 服务器启动
      - name: Test API server startup
        run: |
          echo "Testing API server startup..."
          timeout 30s python -m pkg.apiServer.apiServer &
          sleep 5
          curl -f http://localhost:5050/health || echo "Health check failed"
          pkill -f "pkg.apiServer.apiServer" || true
      
      # 测试后清理
      - name: Cleanup
        run: |
          echo "清理测试进程..."
          pkill -f "python.*pkg" || true
          
          echo "停止依赖服务容器..."
          docker-compose -f ./yamls/docker-compose.yml down || true
        if: always()  # 无论前面的步骤是否成功，都执行此步骤
      
      # 如果测试失败，收集日志
      - name: Collect logs on failure
        if: failure()
        run: |
          echo "Build failed, collecting logs..."
          ls -la logs/ || true
          tail -100 logs/*.log || true
          
      # 上传日志文件作为构建产物
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: logs/
          retention-days: 5

  # 测试任务 - 主分支的测试流程（在部署后执行）
  test_main:
    needs: [code_quality, deploy]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      # 启动 cAdvisor 容器用于监控
      cadvisor:
        image: google/cadvisor:latest
        ports:
          - 8080:8080
        volumes:
          - /:/rootfs:ro
          - /var/run:/var/run:ro
          - /sys:/sys:ro
          - /var/lib/docker/:/var/lib/docker:ro
          - /dev/disk/:/dev/disk:ro
        options: --privileged
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
          pip install docker requests pyyaml
          
      - name: Prepare test environment
        run: |
          mkdir -p logs testFile
      
      # 检查依赖服务（etcd和kafka）
      - name: Check dependencies
        run: |
          echo "检查依赖服务 (etcd和kafka)..."
          
          # 检查etcd (2379端口)
          nc -z localhost 2379 2>/dev/null
          ETCD_RUNNING=$?
          
          # 检查kafka (9092端口)
          nc -z localhost 9092 2>/dev/null
          KAFKA_RUNNING=$?
          
          if [ $ETCD_RUNNING -ne 0 ] || [ $KAFKA_RUNNING -ne 0 ]; then
            echo "etcd或kafka服务未运行，启动所需容器..."
            
            # 确定使用哪个docker-compose文件
            DOCKER_COMPOSE_FILE="./yamls/docker-compose.yml"
            
            # 停止可能存在的冲突容器
            docker-compose -f $DOCKER_COMPOSE_FILE down || true
            
            # 启动docker-compose
            echo "使用docker-compose启动依赖服务..."
            docker-compose -f $DOCKER_COMPOSE_FILE up -d
            
            # 等待服务启动
            echo "等待依赖服务启动 (30秒)..."
            sleep 30
            
            # 再次检查服务
            nc -z localhost 2379 2>/dev/null || { echo "etcd服务启动失败"; exit 1; }
            nc -z localhost 9092 2>/dev/null || { echo "kafka服务启动失败"; exit 1; }
            
            echo "依赖服务已成功启动"
          else
            echo "依赖服务已经在运行"
          fi
      
      # 启动所需服务
      - name: Start required services
        run: |
          echo "启动应用服务..."
          bash ./start.sh
          sleep 15  # 等待服务完全启动
      
      # 运行模块测试
      - name: Test individual modules
        run: |
          echo "Testing individual modules..."
          python -m pkg.apiObject.pod --test || true
          python -m pkg.apiObject.replicaSet --test || true
          python -m pkg.apiObject.hpa --test || true
      
      # 停止服务
      - name: Stop services
        run: |
          echo "Stopping services..."
          bash ./start.sh --stop
        if: always()  # 无论前面的步骤是否成功，都执行此步骤
      
      # 测试配置文件加载
      - name: Test configuration loading
        run: |
          echo "Testing configuration loading..."
          python -c "
          import sys, os
          sys.path.insert(0, os.getcwd())
          from pkg.config.globalConfig import GlobalConfig
          from pkg.config.uriConfig import URIConfig
          print('Config loading test passed')
          " || true
      
      # 测试 API 服务器启动
      - name: Test API server startup
        run: |
          echo "Testing API server startup..."
          timeout 30s python -m pkg.apiServer.apiServer &
          sleep 5
          curl -f http://localhost:5050/health || echo "Health check failed"
          pkill -f "pkg.apiServer.apiServer" || true
      
      # 测试后清理
      - name: Cleanup
        run: |
          echo "清理测试进程..."
          pkill -f "python.*pkg" || true
          
          echo "停止依赖服务容器..."
          docker-compose -f ./yamls/docker-compose.yml down || true
        if: always()  # 无论前面的步骤是否成功，都执行此步骤
      
      # 如果测试失败，收集日志
      - name: Collect logs on failure
        if: failure()
        run: |
          echo "Build failed, collecting logs..."
          ls -la logs/ || true
          tail -100 logs/*.log || true
          
      # 上传日志文件作为构建产物
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: logs/
          retention-days: 5
          
# 此处结束工作流文件
