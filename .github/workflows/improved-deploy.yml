name: 改进的部署流程

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHONPATH: ${{ github.workspace }}
  K8S_TEST_MODE: true

jobs:
  # 代码质量检查
  code_quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black
          
      - name: Code quality checks
        run: |
          echo "Running code quality checks..."
          flake8 pkg/ --count --select=E9,F63,F7,F82 --show-source --statistics --max-line-length=120 || true
          black --check pkg/ || true

  # 部署任务，只在主分支推送时运行
  deploy:
    # needs: [test]  # 如果有测试任务，可以取消注释此行
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整的git历史用于部署
      
      - name: Set up SSH with detailed diagnostics
        run: |
          echo "配置SSH连接..."
          mkdir -p ~/.ssh
          
          # 显示当前运行器的一些信息，帮助诊断
          echo "运行器IP信息:"
          curl -s https://ifconfig.me
          echo ""
          curl -s https://ipinfo.io
          
          # 检查SSH私钥是否存在
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "错误: SSH_PRIVATE_KEY secret 未设置"
            exit 1
          fi
          
          # 检查私钥格式是否正确（应以-----BEGIN开头）
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | head -n 1 | grep -q "BEGIN" || {
            echo "错误: SSH_PRIVATE_KEY 格式错误，请检查是否正确粘贴了完整的私钥内容"
            echo "私钥头部内容如下（用于调试）:"
            echo "${{ secrets.SSH_PRIVATE_KEY }}" | head -n 1
            exit 1
          }
          
          # 设置SSH私钥（注意权限设置）
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # 获取服务器IP地址
          SERVER_TARGET="${{ secrets.SERVER_IP }}"
          
          # 验证服务器IP是否存在
          if [ -z "$SERVER_TARGET" ]; then
            echo "错误: 没有配置服务器IP (SERVER_IP)"
            exit 1
          fi
          
          echo "使用服务器地址: $SERVER_TARGET"
          
          # 检查SERVER_USER是否存在
          if [ -z "${{ secrets.SERVER_USER }}" ]; then
            echo "错误: SERVER_USER secret 未设置"
            exit 1
          fi
          
          # 为SSH客户端配置更宽松的连接策略和详细日志
          echo "Host $SERVER_TARGET" >> ~/.ssh/config
          echo "    StrictHostKeyChecking no" >> ~/.ssh/config
          echo "    UserKnownHostsFile /dev/null" >> ~/.ssh/config
          echo "    LogLevel DEBUG3" >> ~/.ssh/config
          echo "    ConnectTimeout 30" >> ~/.ssh/config
          echo "    ServerAliveInterval 60" >> ~/.ssh/config
          echo "    ServerAliveCountMax 10" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Verify SSH connection
        run: |
          echo "尝试连接到服务器..."
          SERVER_TARGET="${{ secrets.SERVER_IP }}"
          
          # 不直接打印服务器地址，而是打印部分信息以进行验证
          # 提取IP的最后一部分，这不会泄露完整地址但能帮助确认
          if [[ $SERVER_TARGET =~ ([0-9]+)$ ]]; then
            echo "使用的服务器IP以 ${BASH_REMATCH[1]} 结尾"
          fi
          
          # 检查与服务器的网络连接
          echo "检查与服务器的网络连接..."
          ping -c 4 $SERVER_TARGET || {
            echo "警告: 无法ping通服务器，但这可能是由于服务器禁用了ping"
          }
          
          # 测试SSH连接的多种方式
          echo "测试基本SSH连接..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o ConnectTimeout=20 ${{ secrets.SERVER_USER }}@$SERVER_TARGET "echo '连接成功'" && {
            echo "✅ 基本SSH连接成功！"
          } || {
            echo "❌ 基本SSH连接失败"
            
            echo "测试不同的SSH选项..."
            
            echo "尝试使用纯IPv4连接..."
            ssh -i ~/.ssh/id_rsa -4 -o StrictHostKeyChecking=no -o ConnectTimeout=20 ${{ secrets.SERVER_USER }}@$SERVER_TARGET "echo '连接成功'" && echo "✅ IPv4连接成功!" || echo "❌ IPv4连接失败"
            
            echo "尝试使用端口22..."
            ssh -i ~/.ssh/id_rsa -p 22 -o StrictHostKeyChecking=no -o ConnectTimeout=20 ${{ secrets.SERVER_USER }}@$SERVER_TARGET "echo '连接成功'" && echo "✅ 端口22连接成功!" || echo "❌ 端口22连接失败"
            
            echo "显示详细的SSH连接信息以帮助诊断..."
            ssh -vvv -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o ConnectTimeout=30 ${{ secrets.SERVER_USER }}@$SERVER_TARGET "echo '测试'" || true
            
            echo "连接测试失败，但继续尝试部署..."
          }
          
      - name: Deploy to server
        continue-on-error: true  # 即使连接测试失败，也尝试部署
        run: |
          echo "部署到服务器..."
          SERVER_TARGET="${{ secrets.SERVER_IP }}"
          
          # 打印DNS解析结果，帮助诊断
          echo "服务器DNS解析结果:"
          getent hosts $SERVER_TARGET || echo "无法解析主机名"
          
          # 将代码推送到服务器的指定目录
          echo "传输代码到远程服务器..."
          rsync -avz -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o ConnectTimeout=30" --exclude '.git' --exclude 'node_modules' --delete ./ ${{ secrets.SERVER_USER }}@$SERVER_TARGET:/root/deploy/ || {
            echo "错误: 无法传输代码到服务器"
            
            # 尝试使用SCP作为备用方案
            echo "尝试使用SCP作为备用传输方式..."
            tar czf /tmp/deploy.tar.gz --exclude='.git' --exclude='node_modules' ./
            scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o ConnectTimeout=30 /tmp/deploy.tar.gz ${{ secrets.SERVER_USER }}@$SERVER_TARGET:/tmp/deploy.tar.gz && {
              ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@$SERVER_TARGET "mkdir -p /root/deploy && tar xzf /tmp/deploy.tar.gz -C /root/deploy"
            } || {
              echo "错误: SCP传输也失败"
              exit 1
            }
          }
          
          # 远程执行部署脚本
          echo "执行部署脚本..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@$SERVER_TARGET "cd /root/deploy && chmod +x ./deploy.sh && bash ./deploy.sh" || {
            echo "错误: 部署脚本执行失败"
            # 显示可能的错误日志
            ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@$SERVER_TARGET "cd /root/deploy && ls -la && cat logs/*.log 2>/dev/null || echo '没有日志文件'"
            exit 1
          }
          
          echo "部署成功完成！"
