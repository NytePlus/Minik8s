name: 简化部署流程

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHONPATH: ${{ github.workspace }}
  K8S_TEST_MODE: true

jobs:
  # 代码质量检查
  code_quality:
    runs-on: ubuntu-latest  # 使用GitHub托管的运行器
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black
          
      - name: Code quality checks
        run: |
          echo "Running code quality checks..."
          flake8 pkg/ --count --select=E9,F63,F7,F82 --show-source --statistics --max-line-length=120 || true
          black --check pkg/ || true

  # 测试任务
  # test:
  #   needs: [code_quality]
  #   runs-on: ubuntu-latest  # 使用GitHub托管的运行器
    
  #   services:
  #     # 启动 cAdvisor 容器用于监控
  #     cadvisor:
  #       image: google/cadvisor:latest
  #       ports:
  #         - 8080:8080
  #       volumes:
  #         - /:/rootfs:ro
  #         - /var/run:/var/run:ro
  #         - /sys:/sys:ro
  #         - /var/lib/docker/:/var/lib/docker:ro
  #         - /dev/disk/:/dev/disk:ro
  #       options: --privileged
    
  #   steps:
  #     - uses: actions/checkout@v3
      
  #     - name: Set up Python 3.12
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.12'
          
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt
  #         pip install pytest pytest-cov
  #         pip install docker requests pyyaml
          
  #     - name: Install system dependencies
  #       run: |
  #         echo "安装系统依赖..."
  #         sudo apt-get update
  #         sudo apt-get install -y netcat-openbsd docker-compose
          
  #     - name: Prepare test environment
  #       run: |
  #         mkdir -p logs testFile
      
  #     # 检查依赖服务（etcd和kafka）
  #     - name: Check dependencies
  #       run: |
  #         echo "检查依赖服务 (etcd和kafka)..."
          
  #         # 检查etcd (2379端口)
  #         nc -z localhost 2379 2>/dev/null
  #         ETCD_RUNNING=$?
          
  #         # 检查kafka (9092端口)
  #         nc -z localhost 9092 2>/dev/null
  #         KAFKA_RUNNING=$?

  #         echo "to here"

  #         if [ $ETCD_RUNNING -ne 0 ]; then
  #           echo "etcd服务未运行，启动容器"
  #           # 先清理可能存在的同名容器
  #           docker rm -f etcd 2>/dev/null || true
            
  #           docker run -d \
  #           --name etcd \
  #           -p 2379:2379 \
  #           -p 2380:2380 \
  #           quay.io/coreos/etcd:v3.5.0 \
  #           /usr/local/bin/etcd \
  #           --listen-client-urls http://0.0.0.0:2379 \
  #           --advertise-client-urls http://localhost:2379
            
  #           # 等待etcd启动并检查
  #           echo "等待etcd服务启动 (10秒)..."
  #           sleep 10
  #           nc -z localhost 2379 2>/dev/null
  #           if [ $? -ne 0 ]; then
  #             echo "etcd服务启动失败，查看日志:"
  #             docker logs etcd
  #             exit 1
  #           fi
  #           echo "etcd服务已成功启动"
  #         else
  #           echo "etcd服务正在运行"
  #         fi
          
  #         if [ $KAFKA_RUNNING -ne 0 ]; then
  #           echo "kafka服务未运行，启动所需容器..."
            
  #           # 确定使用哪个docker-compose文件
  #           DOCKER_COMPOSE_FILE="./yamls/docker-compose.yml"
            
  #           # 停止可能存在的冲突容器
  #           docker-compose -f $DOCKER_COMPOSE_FILE down || true
            
  #           # 启动docker-compose
  #           echo "使用docker-compose启动依赖服务..."
  #           docker-compose -f $DOCKER_COMPOSE_FILE up -d
            
  #           # 等待服务启动
  #           echo "等待依赖服务启动 (30秒)..."
  #           sleep 30
            
  #           # 再次检查服务
  #           nc -z localhost 2379 2>/dev/null || { echo "etcd服务启动失败"; exit 1; }
  #           nc -z localhost 9092 2>/dev/null || { echo "kafka服务启动失败"; exit 1; }
            
  #           echo "依赖服务已成功启动"
  #         else
  #           echo "依赖服务已经在运行"
  #         fi
      
  #     # 启动所需服务
  #     - name: Start required services
  #       run: |
  #         echo "启动应用服务..."
  #         bash ./start.sh
  #         sleep 15  # 等待服务完全启动
      
  #     # 运行模块测试
  #     - name: Test individual modules
  #       run: |
  #         echo "Testing individual modules..."
  #         python -m pkg.apiObject.pod --test || true
  #         python -m pkg.apiObject.replicaSet --test || true
  #         python -m pkg.apiObject.hpa --test || true
      
  #     # 停止服务
  #     - name: Stop services
  #       run: |
  #         echo "Stopping services..."
  #         bash ./start.sh --stop
  #       if: always()  # 无论前面的步骤是否成功，都执行此步骤
      
  #     # 测试配置文件加载
  #     - name: Test configuration loading
  #       run: |
  #         echo "Testing configuration loading..."
  #         python -c "
  #         import sys, os
  #         sys.path.insert(0, os.getcwd())
  #         from pkg.config.globalConfig import GlobalConfig
  #         from pkg.config.uriConfig import URIConfig
  #         print('Config loading test passed')
  #         " || true
      
  #     # 测试 API 服务器启动
  #     - name: Test API server startup
  #       run: |
  #         echo "Testing API server startup..."
  #         timeout 30s python -m pkg.apiServer.apiServer &
  #         sleep 5
  #         curl -f http://localhost:5050/health || echo "Health check failed"
  #         pkill -f "pkg.apiServer.apiServer" || true
      
  #     # 测试后清理
  #     - name: Cleanup
  #       run: |
  #         echo "清理测试进程..."
  #         pkill -f "python.*pkg" || true
          
  #         echo "停止依赖服务容器..."
  #         docker-compose -f ./yamls/docker-compose.yml down || true
  #       if: always()  # 无论前面的步骤是否成功，都执行此步骤
      
  #     # 如果测试失败，收集日志
  #     - name: Collect logs on failure
  #       if: failure()
  #       run: |
  #         echo "Build failed, collecting logs..."
  #         ls -la logs/ || true
  #         tail -100 logs/*.log || true
          
  #     # 上传日志文件作为构建产物
  #     - name: Upload logs
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: logs
  #         path: logs/
  #         retention-days: 5

  # 部署任务，只在主分支推送时运行
  deploy:
    # needs: [test]  # 依赖测试成功
    runs-on: ubuntu-latest  # 使用GitHub托管的运行器
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'  # 只在主分支推送时运行
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整的git历史用于部署
      
      - name: Set up SSH
        run: |
          echo "配置SSH连接..."
          mkdir -p ~/.ssh
          
          # 检查SSH私钥是否存在
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "错误: SSH_PRIVATE_KEY secret 未设置"
            exit 1
          fi
          
          # 设置SSH私钥（注意权限设置）
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # 确定使用主机名还是IP
          SERVER_TARGET="${{ secrets.SERVER_HOST }}"
          if [ -z "$SERVER_TARGET" ]; then
            SERVER_TARGET="${{ secrets.SERVER_IP }}"
          fi
          
          # 验证服务器地址是否存在
          if [ -z "$SERVER_TARGET" ]; then
            echo "错误: 没有配置服务器地址 (SERVER_HOST 或 SERVER_IP)"
            exit 1
          fi
          
          echo "使用服务器地址: $SERVER_TARGET"
          
          # 添加服务器到已知主机
          ssh-keyscan -H $SERVER_TARGET >> ~/.ssh/known_hosts 2>/dev/null || {
            echo "警告: 无法扫描服务器 SSH 密钥"
            # 添加 StrictHostKeyChecking=no 以便后续命令不需要检查主机密钥
            echo "Host $SERVER_TARGET" >> ~/.ssh/config
            echo "    StrictHostKeyChecking no" >> ~/.ssh/config
            chmod 600 ~/.ssh/config
          }
      
      - name: Deploy to server
        run: |
          echo "部署到服务器..."
          
          # 确定使用主机名还是IP
          SERVER_TARGET="${{ secrets.SERVER_HOST }}"
          if [ -z "$SERVER_TARGET" ]; then
            SERVER_TARGET="${{ secrets.SERVER_IP }}"
          fi
          
          # 检查SERVER_USER是否存在
          if [ -z "${{ secrets.SERVER_USER }}" ]; then
            echo "错误: SERVER_USER secret 未设置"
            exit 1
          fi
          
          # 测试SSH连接
          echo "测试SSH连接..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o ConnectTimeout=10 ${{ secrets.SERVER_USER }}@$SERVER_TARGET "echo '连接成功'" || {
            echo "错误: 无法连接到服务器"
            # 显示详细的连接信息以帮助诊断
            ssh -vvv -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o ConnectTimeout=20 ${{ secrets.SERVER_USER }}@$SERVER_TARGET "echo 测试" || true
            exit 1
          }
          
          # 将代码推送到服务器的指定目录
          echo "传输代码到远程服务器..."
          rsync -avz -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" --exclude '.git' --exclude 'node_modules' --delete ./ ${{ secrets.SERVER_USER }}@$SERVER_TARGET:/root/deploy/ || {
            echo "错误: 无法传输代码到服务器"
            exit 1
          }
          
          # 远程执行部署脚本
          echo "执行部署脚本..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@$SERVER_TARGET "cd /root/deploy && chmod +x ./deploy.sh && bash ./deploy.sh" || {
            echo "错误: 部署脚本执行失败"
            # 显示可能的错误日志
            ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@$SERVER_TARGET "cd /root/deploy && ls -la && cat logs/*.log 2>/dev/null || echo '没有日志文件'"
            exit 1
          }
          
          echo "部署成功完成！"
