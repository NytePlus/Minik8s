# name: 密码认证部署流程

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# env:
#   PYTHONPATH: ${{ github.workspace }}
#   K8S_TEST_MODE: true

# jobs:
#   # 代码质量检查
#   code_quality:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
      
#       - name: Set up Python 3.12
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.12'
          
#       - name: Install linting tools
#         run: |
#           python -m pip install --upgrade pip
#           pip install flake8 black
          
#       - name: Code quality checks
#         run: |
#           echo "Running code quality checks..."
#           flake8 pkg/ --count --select=E9,F63,F7,F82 --show-source --statistics --max-line-length=120 || true
#           black --check pkg/ || true

#   # 部署任务，只在主分支推送时运行
#   deploy:
#     # needs: [test]  # 如果有测试任务，可以取消注释此行
#     runs-on: ubuntu-latest
#     if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
#     steps:
#       - uses: actions/checkout@v3
#         with:
#           fetch-depth: 0  # 获取完整的git历史用于部署
      
#       - name: Install sshpass
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y sshpass
      
#       - name: Verify server connection
#         run: |
#           echo "尝试连接到服务器..."
          
#           # 检查环境变量是否存在
#           if [ -z "${{ secrets.REMOTE_PASSWORD }}" ]; then
#             echo "错误: REMOTE_PASSWORD secret 未设置"
#             exit 1
#           fi
          
#           if [ -z "${{ secrets.REMOTE_USER }}" ]; then
#             echo "错误: REMOTE_USER secret 未设置"
#             exit 1
#           fi
          
#           if [ -z "${{ secrets.REMOTE_HOST }}" ]; then
#             echo "错误: REMOTE_HOST secret 未设置"
#             exit 1
#           fi
          
#           # 使用sshpass进行连接测试
#           export SSHPASS=${{ secrets.REMOTE_PASSWORD }}
#           sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} "echo '连接测试成功'" || {
#             echo "错误: 无法连接到服务器"
#             exit 1
#           }
          
#           echo "服务器连接成功!"
      
#       - name: Create package directory
#         run: |
#           echo "创建部署包..."
#           mkdir -p ./deploy-pkg
#           cp -r pkg/ ./deploy-pkg/
#           cp -r yamls/ ./deploy-pkg/
#           cp *.sh ./deploy-pkg/
#           cp requirements.txt ./deploy-pkg/
#           cp README.md ./deploy-pkg/ 2>/dev/null || true
          
#           # 创建部署脚本(如果不存在)
#           if [ ! -f ./deploy-pkg/deploy.sh ]; then
#             echo '#!/bin/bash' > ./deploy-pkg/deploy.sh
#             echo '# 自动部署脚本' >> ./deploy-pkg/deploy.sh
#             echo '' >> ./deploy-pkg/deploy.sh
#             echo 'echo "开始部署..."' >> ./deploy-pkg/deploy.sh
#             echo 'DEPLOY_DIR=$(dirname "$0")' >> ./deploy-pkg/deploy.sh
#             echo 'cd $DEPLOY_DIR' >> ./deploy-pkg/deploy.sh
#             echo '' >> ./deploy-pkg/deploy.sh
#             echo '# 安装依赖' >> ./deploy-pkg/deploy.sh
#             echo 'pip3 install -r requirements.txt || {' >> ./deploy-pkg/deploy.sh
#             echo '  echo "安装依赖失败"' >> ./deploy-pkg/deploy.sh
#             echo '  exit 1' >> ./deploy-pkg/deploy.sh
#             echo '}' >> ./deploy-pkg/deploy.sh
#             echo '' >> ./deploy-pkg/deploy.sh
#             echo '# 启动服务' >> ./deploy-pkg/deploy.sh
#             echo 'bash ./start.sh' >> ./deploy-pkg/deploy.sh
#             echo '' >> ./deploy-pkg/deploy.sh
#             echo 'echo "部署完成!"' >> ./deploy-pkg/deploy.sh
#             chmod +x ./deploy-pkg/deploy.sh
#           fi
          
#           # 创建停止脚本(如果不存在)
#           if [ ! -f ./deploy-pkg/stop.sh ]; then
#             echo '#!/bin/bash' > ./deploy-pkg/stop.sh
#             echo '# 停止服务脚本' >> ./deploy-pkg/stop.sh
#             echo '' >> ./deploy-pkg/stop.sh
#             echo 'echo "停止所有服务..."' >> ./deploy-pkg/stop.sh
#             echo 'bash ./start.sh --stop' >> ./deploy-pkg/stop.sh
#             echo '' >> ./deploy-pkg/stop.sh
#             echo 'echo "服务已停止!"' >> ./deploy-pkg/stop.sh
#             chmod +x ./deploy-pkg/stop.sh
#           fi
          
#           echo "部署包准备完成。"
      
#       - name: Deploy to server
#         run: |
#           echo "部署到服务器..."
#           export SSHPASS=${{ secrets.REMOTE_PASSWORD }}
          
#           # 停止目标服务器上运行的服务
#           echo "停止服务器上的服务..."
#           sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} "if [ -f /root/deploy/stop.sh ]; then cd /root/deploy && bash ./stop.sh; else echo '没有找到停止脚本，尝试停止Python进程...'; pkill -f 'python.*pkg' || true; fi && echo '服务已停止'"
          
#           # 创建目标目录(如果不存在)
#           sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} "mkdir -p /root/deploy"
          
#           # 上传部署包
#           echo "上传部署包..."
#           sshpass -e scp -o StrictHostKeyChecking=no -r ./deploy-pkg/* ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/root/deploy/ || {
#             echo "错误: 无法传输文件到服务器"
#             exit 1
#           }
          
#           echo "文件上传成功"
          
#           # 执行部署脚本
#           echo "执行部署脚本..."
#           sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} "cd /root/deploy && chmod +x ./deploy.sh && bash ./deploy.sh && echo '检查服务状态:' && ps -ef | grep python | grep -v grep"
          
#           echo "部署完成!"
